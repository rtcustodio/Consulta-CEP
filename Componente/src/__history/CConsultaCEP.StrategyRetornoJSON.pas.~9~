unit CConsultaCEP.StrategyRetornoJSON;

interface

uses
  CConsultaCEP.EventsAndEnums,
  CConsultaCEP.Intf,
  System.JSON,
  System.SysUtils,
  System.Generics.Collections,
  REST.Json, CConsultaCEP.Classes;

type
  TJSONRetornoStrategy = class(TInterfacedObject, IRetornoStrategy)
  private
    function ExtractJSONValue(JSONObj: TJSONObject; const Key: string): string;
  public
    procedure ProcessarRetorno(const AResponse: string; AOnResult: TViaCEPResult; AOnError: TNotifyErrorEvent);
  end;

implementation

{ TJSONRetornoStrategy }

function TJSONRetornoStrategy.ExtractJSONValue(JSONObj: TJSONObject;
  const Key: string): string;
begin
  if JSONObj.Values[Key] <> nil then
    Result := JSONObj.GetValue<string>(Key)
  else
    Result := '';
end;

procedure TJSONRetornoStrategy.ProcessarRetorno(const AResponse: string;
  AOnResult: TViaCEPResult; AOnError: TNotifyErrorEvent);
var
  JSONValue: TJSONValue;
  JSONArray: TJSONArray;
  JSONObject: TJSONObject;
  Endereco: TEndereco;
  I: Integer;
begin
  JSONValue := TJSONObject.ParseJSONValue(AResponse);

  if not Assigned(JSONValue) then
  begin
    if Assigned(AOnError) then
      AOnError(Self, 'Erro no formato do JSON.');
    Exit;
  end;

  try
    try
      // Verifica se a resposta é um array de endereços
      if JSONValue is TJSONArray then
      begin
        JSONArray := JSONValue as TJSONArray;

        // Percorre o array de endereços e desserializa cada um
        for I := 0 to JSONArray.Count - 1 do
        begin
          JSONObject := JSONArray.Items[I] as TJSONObject;
          Endereco := TJson.JsonToObject<TEndereco>(JSONObject.ToString);

          if Assigned(Endereco) then
          begin
            // Chama o evento de resultado para cada endereço encontrado
            if Assigned(AOnResult) then
              AOnResult(Endereco);
          end;
        end;
      end
      else if JSONValue is TJSONObject then
      begin
        // Quando a resposta é um único objeto (consulta por CEP)
        Endereco := TJson.JsonToObject<TEndereco>(AResponse);

        if Assigned(Endereco) then
        begin
          // Chama o evento de resultado com o único endereço encontrado
          if Assigned(AOnResult) then
            AOnResult(Endereco);
        end
        else
        begin
          if Assigned(AOnError) then
            AOnError(Self, 'Erro ao desserializar o JSON.');
        end;
      end
      else
        raise Exception.Create('Formato de resposta JSON não suportado.');

    except
      on E: Exception do
        if Assigned(AOnError) then
          AOnError(Self, 'Erro ao processar o retorno JSON: ' + E.Message);
    end;
  finally
    JSONValue.Free;
  end;
end;


end.
